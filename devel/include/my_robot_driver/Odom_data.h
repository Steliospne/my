// Generated by gencpp from file my_robot_driver/Odom_data.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_DRIVER_MESSAGE_ODOM_DATA_H
#define MY_ROBOT_DRIVER_MESSAGE_ODOM_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_driver
{
template <class ContainerAllocator>
struct Odom_data_
{
  typedef Odom_data_<ContainerAllocator> Type;

  Odom_data_()
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , d_theta(0.0)
    , vel_l(0.0)
    , vel_r(0.0)
    , counter_l(0)
    , counter_r(0)  {
    }
  Odom_data_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , d_theta(0.0)
    , vel_l(0.0)
    , vel_r(0.0)
    , counter_l(0)
    , counter_r(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _d_theta_type;
  _d_theta_type d_theta;

   typedef double _vel_l_type;
  _vel_l_type vel_l;

   typedef double _vel_r_type;
  _vel_r_type vel_r;

   typedef uint16_t _counter_l_type;
  _counter_l_type counter_l;

   typedef uint16_t _counter_r_type;
  _counter_r_type counter_r;





  typedef boost::shared_ptr< ::my_robot_driver::Odom_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_driver::Odom_data_<ContainerAllocator> const> ConstPtr;

}; // struct Odom_data_

typedef ::my_robot_driver::Odom_data_<std::allocator<void> > Odom_data;

typedef boost::shared_ptr< ::my_robot_driver::Odom_data > Odom_dataPtr;
typedef boost::shared_ptr< ::my_robot_driver::Odom_data const> Odom_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_driver::Odom_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_driver::Odom_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_driver::Odom_data_<ContainerAllocator1> & lhs, const ::my_robot_driver::Odom_data_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta &&
    lhs.d_theta == rhs.d_theta &&
    lhs.vel_l == rhs.vel_l &&
    lhs.vel_r == rhs.vel_r &&
    lhs.counter_l == rhs.counter_l &&
    lhs.counter_r == rhs.counter_r;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_driver::Odom_data_<ContainerAllocator1> & lhs, const ::my_robot_driver::Odom_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_driver::Odom_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_driver::Odom_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_driver::Odom_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_driver::Odom_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_driver::Odom_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_driver::Odom_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_driver::Odom_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e66c9f8493a867e4988030ed11fbd23";
  }

  static const char* value(const ::my_robot_driver::Odom_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e66c9f8493a867eULL;
  static const uint64_t static_value2 = 0x4988030ed11fbd23ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_driver::Odom_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_driver/Odom_data";
  }

  static const char* value(const ::my_robot_driver::Odom_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_driver::Odom_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"float64 d_theta\n"
"float64 vel_l\n"
"float64 vel_r\n"
"uint16 counter_l\n"
"uint16 counter_r\n"
;
  }

  static const char* value(const ::my_robot_driver::Odom_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_driver::Odom_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.d_theta);
      stream.next(m.vel_l);
      stream.next(m.vel_r);
      stream.next(m.counter_l);
      stream.next(m.counter_r);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odom_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_driver::Odom_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_driver::Odom_data_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "d_theta: ";
    Printer<double>::stream(s, indent + "  ", v.d_theta);
    s << indent << "vel_l: ";
    Printer<double>::stream(s, indent + "  ", v.vel_l);
    s << indent << "vel_r: ";
    Printer<double>::stream(s, indent + "  ", v.vel_r);
    s << indent << "counter_l: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.counter_l);
    s << indent << "counter_r: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.counter_r);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_DRIVER_MESSAGE_ODOM_DATA_H
