// Generated by gencpp from file my_robot_driver/Buttons.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_DRIVER_MESSAGE_BUTTONS_H
#define MY_ROBOT_DRIVER_MESSAGE_BUTTONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_driver
{
template <class ContainerAllocator>
struct Buttons_
{
  typedef Buttons_<ContainerAllocator> Type;

  Buttons_()
    : reset(false)
    , mode(false)
    , stop(false)  {
    }
  Buttons_(const ContainerAllocator& _alloc)
    : reset(false)
    , mode(false)
    , stop(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reset_type;
  _reset_type reset;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _stop_type;
  _stop_type stop;





  typedef boost::shared_ptr< ::my_robot_driver::Buttons_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_driver::Buttons_<ContainerAllocator> const> ConstPtr;

}; // struct Buttons_

typedef ::my_robot_driver::Buttons_<std::allocator<void> > Buttons;

typedef boost::shared_ptr< ::my_robot_driver::Buttons > ButtonsPtr;
typedef boost::shared_ptr< ::my_robot_driver::Buttons const> ButtonsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_driver::Buttons_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_driver::Buttons_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_driver::Buttons_<ContainerAllocator1> & lhs, const ::my_robot_driver::Buttons_<ContainerAllocator2> & rhs)
{
  return lhs.reset == rhs.reset &&
    lhs.mode == rhs.mode &&
    lhs.stop == rhs.stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_driver::Buttons_<ContainerAllocator1> & lhs, const ::my_robot_driver::Buttons_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_robot_driver::Buttons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_driver::Buttons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_driver::Buttons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_driver::Buttons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_driver::Buttons_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_driver::Buttons_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_driver::Buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5eb4537e3fc1caf4d9efa0e1fbc2aa5";
  }

  static const char* value(const ::my_robot_driver::Buttons_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5eb4537e3fc1cafULL;
  static const uint64_t static_value2 = 0x4d9efa0e1fbc2aa5ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_driver::Buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_driver/Buttons";
  }

  static const char* value(const ::my_robot_driver::Buttons_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_driver::Buttons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"bool reset\n"
"bool mode\n"
"bool stop\n"
;
  }

  static const char* value(const ::my_robot_driver::Buttons_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_driver::Buttons_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset);
      stream.next(m.mode);
      stream.next(m.stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Buttons_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_driver::Buttons_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_driver::Buttons_<ContainerAllocator>& v)
  {
    s << indent << "reset: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_DRIVER_MESSAGE_BUTTONS_H
